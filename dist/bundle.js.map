{"version":3,"file":"bundle.js","sources":["../src/algorithm/bubbleSort.ts","../src/algorithm/sort.ts","../src/main.ts"],"sourcesContent":["// 时间复杂度n平方\nfunction bubbleSort(List) {\n    if(!List || List.length <= 0) {\n        return ;\n    } else {\n        for(let i = 0; i <= List.length - 1; i ++) {\n            for(let j = 0; j <= List.length - 1; j ++ ){\n                if(List[j] > List[j + 1]) {\n                    [List[j], List[j + 1]] = [List[j + 1], List[j]];\n                }//正序\n                // if(List[j] < List[j + 1]) {\n                //     [List[j], List[j + 1]] = [List[j + 1], List[j]];\n                // }\n            };\n        }\n    }\n    return List;\n}\n\n\n\nexport default bubbleSort;","interface List{\n    element: Array<number>;\n    bubbleSort(List: Array<number>): Array<number>;\n    selectSort(List: Array<number>): Array<number>;\n}\n\nclass ListSort implements List {\n    element;\n    length;\n    constructor(element) {\n        this.element = element;\n        this.length = element.length - 1;\n    }\n    static compareLarge(a, b) {\n        const result = a > b ? true : false;\n        return result;\n    }\n    static compareSmall(a, b) {\n        const result = a > b ? false : true;\n        return result;\n    }\n    public bubbleSort() {\n        const centerElement = this.element;\n        for(let i = 0 ; i <= this.length; i++) {\n            for(let j = 0; j <= this.length; j++) {\n                if (ListSort.compareLarge(centerElement[j + 1],centerElement[j])) {\n                    [centerElement[j], centerElement[j + 1]] = [centerElement[j + 1], centerElement[j]];                    \n                }   \n            }\n        }\n        return centerElement;\n    }\n    public selectSort() {\n        const centerElement = this.element;\n        for(let i = 0; i <=  this.length; i ++) {\n            let minIndex = i;\n            for(let j = 1 ; j <= this.length; j ++) {\n                if(ListSort.compareSmall(centerElement[j], centerElement[j - 1])) {\n                    minIndex = j;\n                }\n            }\n            if(minIndex != i) {\n                [centerElement[minIndex], centerElement[i]] = [centerElement[i], centerElement[minIndex]];                \n            }\n        }\n        return centerElement;\n    }\n}\n\nexport default ListSort;","import { Sort } from './algorithm';\n\nconst ListSort = new Sort([7,4,3,2,1,9,8]);\nconsole.log(ListSort.bubbleSort());\nconsole.log(ListSort.selectSort());\n"],"names":["element","length","a","b","result","centerElement","i","j","ListSort","compareLarge","minIndex","compareSmall","Sort","console","log","bubbleSort","selectSort"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;ACMA;qBAGI,CAAYA,OAAZ;aACSA,OAAL,GAAeA,OAAf;aACKC,MAAL,GAAcD,QAAQC,MAAR,GAAiB,CAA/B;;yBAEG,GAAP,UAAoBC,CAApB,EAAuBC,CAAvB;YACUC,SAASF,IAAIC,CAAJ,GAAQ,IAAR,GAAe,KAA9B;eACOC,MAAP;KAFG;yBAIA,GAAP,UAAoBF,CAApB,EAAuBC,CAAvB;YACUC,SAASF,IAAIC,CAAJ,GAAQ,KAAR,GAAgB,IAA/B;eACOC,MAAP;KAFG;sBAIA,WAAA,GAAP;YACUC,gBAAgB,KAAKL,OAA3B;aACI,IAAIM,IAAI,CAAZ,EAAgBA,KAAK,KAAKL,MAA1B,EAAkCK,GAAlC,EAAuC;iBAC/B,IAAIC,IAAI,CAAZ,EAAeA,KAAK,KAAKN,MAAzB,EAAiCM,GAAjC,EAAsC;oBAC9BC,SAASC,YAAT,CAAsBJ,cAAcE,IAAI,CAAlB,CAAtB,EAA2CF,cAAcE,CAAd,CAA3C,CAAJ,EAAkE;iEAC9D,EAACF,eAAA,SAAD,EAAmBA,mBAAA,SAAnB;;;;eAILA,aAAP;;KATG;sBAWA,WAAA,GAAP;YACUA,gBAAgB,KAAKL,OAA3B;aACI,IAAIM,IAAI,CAAZ,EAAeA,KAAM,KAAKL,MAA1B,EAAkCK,GAAlC,EAAwC;gBAChCI,WAAWJ,CAAf;iBACI,IAAIC,IAAI,CAAZ,EAAgBA,KAAK,KAAKN,MAA1B,EAAkCM,GAAlC,EAAwC;oBACjCC,SAASG,YAAT,CAAsBN,cAAcE,CAAd,CAAtB,EAAwCF,cAAcE,IAAI,CAAlB,CAAxC,CAAH,EAAkE;+BACnDA,CAAX;;;gBAGLG,YAAYJ,CAAf,EAAkB;gEACd,EAACD,sBAAA,SAAD,EAA0BA,eAAA,SAA1B;;;eAGDA,aAAP;;KAbG;mBAeX;GAzCA;;ACJA,IAAMG,WAAW,IAAII,UAAJ,CAAS,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,CAAT,CAAjB;AACAC,QAAQC,GAAR,CAAYN,SAASO,UAAT,EAAZ;AACAF,QAAQC,GAAR,CAAYN,SAASQ,UAAT,EAAZ"}