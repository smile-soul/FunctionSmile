{"version":3,"file":"bundle.js","sources":["../src/algorithm/bubbleSort.ts","../src/algorithm/sort.ts","../src/main.ts"],"sourcesContent":["// 时间复杂度n平方\nfunction bubbleSort(List) {\n    if(!List || List.length <= 0) {\n        return ;\n    } else {\n        for(let i = 0; i <= List.length - 1; i ++) {\n            for(let j = 0; j <= List.length - 1; j ++ ){\n                if(List[j] > List[j + 1]) {\n                    [List[j], List[j + 1]] = [List[j + 1], List[j]];\n                }//正序\n                // if(List[j] < List[j + 1]) {\n                //     [List[j], List[j + 1]] = [List[j + 1], List[j]];\n                // }\n            };\n        }\n    }\n    return List;\n}\n\n\n\nexport default bubbleSort;","interface List{\n    element: Array<number>;\n    bubbleSort(List: Array<number>): Array<number>;\n    selectSort(List: Array<number>): Array<number>;\n}\n\nclass ListSort implements List {\n    element;\n    length;\n    constructor(element) {\n        this.element = element;\n        this.length = element.length - 1;\n    }\n    static compareLarge(a, b) {\n        const result = a > b ? true : false;\n        return result;\n    }\n    static compareSmall(a, b) {\n        const result = a > b ? false : true;\n        return result;\n    }\n    public bubbleSort() {\n        const centerElement = this.element;\n        for(let i = 0 ; i <= this.length; i++) {\n            for(let j = 0; j <= this.length; j++) {\n                if (ListSort.compareLarge(centerElement[j + 1],centerElement[j])) {\n                    [centerElement[j], centerElement[j + 1]] = [centerElement[j + 1], centerElement[j]];                    \n                }   \n            }\n        }\n        return centerElement;\n    }\n    public selectSort() {\n        const centerElement = this.element;\n        for(let i = 0; i <=  this.length; i ++) {\n            let minIndex = i;\n            for(let j = 1 ; j <= this.length; j ++) {\n                if(ListSort.compareSmall(centerElement[j], centerElement[j - 1])) {\n                    minIndex = j;\n                }\n            }\n            if(minIndex != i) {\n                [centerElement[minIndex], centerElement[i]] = [centerElement[i], centerElement[minIndex]];                \n            }\n        }\n        return centerElement;\n    }\n    public insertSort() {\n        const centerElement = this.element;\n        for (let i = 1; i <= this.length; i ++) {\n            let key = centerElement[i];\n            for (let j = i - 1; j >= 0 && ListSort.compareLarge(centerElement[j], key); j --) {\n                centerElement[j + 1] = centerElement[j];\n                centerElement[j] = key;\n            }\n        }\n        return centerElement;\n    }\n    public shellSort() {\n        const centerElement = this.element;\n        for (let i = this.length; i > 0; i = Math.floor(i / 2)) {\n            let key = centerElement[Math.floor(i / 2)];\n            for(let j = Math.floor(i / 2); j >= 0 && ListSort.compareLarge(centerElement[j],key); j = j - Math.floor(i / 2)) {\n                centerElement[j + 1] = centerElement[j];\n                centerElement[j] = key;\n            }\n        }\n        return centerElement;\n    }\n    public mergeSort(element) {\n        var centerLength = element.length;\n        if (centerLength < 2) {\n            return element;\n        }\n        var middle = Math.floor(centerLength / 2);\n        var left = element.slice(0, middle);\n        var right = element.slice(middle);\n        return this.merge(this.mergeSort(left), this.mergeSort(right));\n    }\n    public merge(left, right) {\n        console.log(left);\n        console.log(right);\n        var result = [];\n        while (left.length && right.length) {\n            if(left[0] <= right[0]) {\n                result.push(left.shift());\n            } else {\n                result.push(right.shift())\n            }\n        }\n        while (left.length)\n            result.push(left.shift());\n        while (right.length)\n            result.push(left.shift());\n        return result;\n    }   \n}\n\nexport default ListSort;","import { Sort } from './algorithm';\n\nconst ListSort = new Sort([7,4,3,2,1,9,8]);\nconsole.log(ListSort.bubbleSort());\nconsole.log(ListSort.selectSort());\nconsole.log(ListSort.insertSort());\nconsole.log(ListSort.shellSort());\nconsole.log(ListSort.mergeSort([7,4,3,2,1,9,8]));"],"names":["element","length","a","b","result","centerElement","i","j","ListSort","compareLarge","minIndex","compareSmall","key","Math","floor","centerLength","middle","left","slice","right","merge","mergeSort","log","push","shift","Sort","console","bubbleSort","selectSort","insertSort","shellSort"],"mappings":"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"}